// Generated by CoffeeScript 1.7.1
(function() {
  var Client, connect, events, msgpack, neovim_method_list, net;

  net = require("net");

  msgpack = require('msgpack-js');

  events = require('events');

  neovim_method_list = ['vim_command', 'vim_err_write', 'vim_eval', 'vim_get_current_buffer', 'vim_out_write', 'vim_push_keys'];

  Client = function(address) {
    var err, self;
    self = Object.create({});
    try {
      this.client = net.createConnection('/tmp/neovim', function() {
        console.log('neovim connected');
      });
    } catch (_error) {
      err = _error;
      console.log(err);
    }
    this.next_request_id = 1;
    this.pending_message = [];
    this.apiResolved = false;
    this.neovim_method_dict = {};
  };

  Client.prototype.listenRPCStatus = function() {
    var rpcStatus, _this;
    rpcStatus = new events.EventEmitter();
    _this = this;
    rpcStatus.on('free', function() {
      if (_this.pending_message.length !== 0) {
        _this.push_queue();
      }
    });
    rpcStatus.on('addNewMessage', function() {
      if (_this.pending_message.length === 1 && this.apiResolved) {
        _this.rpcStatus.emit('free');
      }
    });
    return rpcStatus;
  };

  Client.prototype.command = function(args) {
    var method_name;
    method_name = 'vim_command';
    this.pending_message.push([method_name, [args]]);
    this.rpcStatus.emit('addNewMessage');
  };

  Client.prototype.push_keys = function(args) {
    var method_name;
    method_name = 'vim_push_keys';
    this.pending_message.push([method_name, ["i"]]);
    this.rpcStatus.emit('addNewMessage');
  };

  Client.prototype.push_queue = function() {
    var args, method_id, method_name, packed_msg, request_id, _this;
    method_name = this.pending_message[0][0];
    args = this.pending_message[0][1];
    method_id = this.neovim_method_dict[method_name];
    request_id = this.next_request_id;
    this.next_request_id = request_id + 1;
    packed_msg = msgpack.encode([0, request_id, method_id, args]);
    this.client.write(packed_msg);
    this.pending_message.splice(0, 1);
    _this = this;
    return this.client.once('data', function(msg) {
      var api, unpackData;
      unpackData = msgpack.decode(msg);
      api = unpackData;
      _this.rpcStatus.emit('free');
    });
  };

  Client.prototype.discover_api = function(callback) {
    var dummy_array, dummy_msg, _this;
    dummy_array = [0, 0, 0, []];
    dummy_msg = msgpack.encode(dummy_array);
    this.client.write(dummy_msg);
    _this = this;
    this.client.once('data', function(msg) {
      var api, method_id, method_name, re, unpackData, _i, _len;
      unpackData = msgpack.decode(msg);
      api = unpackData[3][1];
      for (_i = 0, _len = neovim_method_list.length; _i < _len; _i++) {
        method_name = neovim_method_list[_i];
        re = new RegExp(method_name + "[\\s\\S]{3}\([\u0001-\u003F]\)", "i");
        method_id = re.exec(api)[1].charCodeAt(0);
        _this.neovim_method_dict[method_name] = method_id;
      }
      _this.apiResolved = true;
      _this.rpcStatus.emit('free');
    });
  };

  connect = function(address) {
    var client;
    client = new Client(address);
    client.rpcStatus = client.listenRPCStatus();
    client.discover_api();
    return client;
  };

  exports.connect = connect;

}).call(this);
